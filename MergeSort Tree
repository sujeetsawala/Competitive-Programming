
const int N=200005;

vector <ll> tree[6*N];
ll a[N],pre[N],n,t;

void merge(int u,int v,int w)
{
	
	int l=0,r=0;

	while(l<tree[u].size()&&r<tree[v].size())
	{
		if(tree[u][l]<=tree[v][r])
		{
			tree[w].pb(tree[u][l]);
			l++;
		}
		else
		{
			tree[w].pb(tree[v][r]);
			r++;
		}
	}

	while(l<tree[u].size())
	{
		tree[w].pb(tree[u][l]);
			l++;
	}

	while(r<tree[v].size())
	{
		tree[w].pb(tree[v][r]);
			r++;
	}
}


int search(int u,ll value)
{
	int l=0,r=tree[u].size()-1,ans=r+1;

	while(l<=r)
	{
		int mid=(l+r)/2;
		if(tree[u][mid]>value-t)
		{
			ans=mid;
			r=mid-1;
		}
		else
			l=mid+1;
	}

	//cout<<u<<" "<<value<<" "<<tree[u].size()<<" "<<ans<<"\n";

	return tree[u].size()-ans;
}


void build(int s,int e,int node)
{
	if(s==e)
	{
		tree[node].pb(pre[s]);
		return;
	}

	int mid=(s+e)/2;

	build(s,mid,2*node+1);
	build(mid+1,e,2*node+2);
	merge(2*node+1,2*node+2,node);

	/*cout<<node<<":\n";
	for(int i=0;i<tree[node].size();i++)
		cout<<tree[node][i]<<" ";
	cout<<"\n";*/

}

ll query(int s, int e, int l, int r, int node, ll val)
{
	if(s>e||s>r||e<l)
		return 0;

	if(s>=l&&e<=r)
		return search(node,val);
	
	int mid=(s+e)/2;
	ll u=query(s,mid,l,r,2*node+1, val);
	ll v=query(mid+1,e,l,r,2*node+2, val);

	return u+v;
}
